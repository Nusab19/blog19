---
import AvatarComponent from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { parseAuthors } from '@/lib/server-utils'
import { formatDate, readingTime } from '@/lib/utils'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import Link from './Link.astro'
import VisitorsCount from './VisitorsCount'

interface Props {
  post: CollectionEntry<'blog'>
}

const { post } = Astro.props

const formattedDate = formatDate(post.data.date)
const allPosts = await getCollection('blog')

// Calculate total reading time including subposts
const stripCodeBlocks = (text: string) => text.replace(/```[\s\S]*?```/g, '')
const subposts = allPosts.filter((p) => p.data.parentTitle === post.data.title)
const totalBody = [post.body!, ...subposts.map((p) => p.body!)]
  .map(stripCodeBlocks)
  .join('')
const readTime = readingTime(totalBody)

const authors = await parseAuthors(post.data.authors ?? [])
---

<div
  class="not-prose rounded-xl border p-3 transition-colors duration-300 ease-in-out hover:bg-secondary/50"
>
  <div class="flex flex-col gap-4">
    <Link href={`/blog/${post.id}`} class="flex flex-col gap-4 sm:flex-row">
      {
        post.data.image && (
          <div class="mx-auto max-w-[275px] sm:flex-shrink-0">
            <Image
              src={post.data.image}
              alt={post.data.title}
              width={1200}
              height={630}
              class="rounded-lg object-cover"
            />
          </div>
        )
      }
      <div class="flex-grow">
        <h3 class="mb-1 text-lg font-semibold">
          {post.data.title}
        </h3>
        <p class="mb-2 text-sm text-muted-foreground">
          {post.data.description}
        </p>
        <div
          class="mb-2 mt-4 flex flex-wrap items-center justify-center gap-x-2 gap-y-1 text-xs text-muted-foreground md:justify-start"
        >
          {
            authors.length > 0 && (
              <>
                {authors.map((author) => (
                  <div class="flex items-center gap-x-1.5">
                    <AvatarComponent
                      client:load
                      src={author.avatar}
                      alt={author.name}
                      fallback={author.name[0]}
                      className="size-5 rounded-full"
                    />
                    <span>{author.name}</span>
                  </div>
                ))}
                <Separator orientation="vertical" className="h-4" />
              </>
            )
          }
          <VisitorsCount uniqueName={post.id} readOnly={true} client:load />
          <Separator orientation="vertical" className="h-4" />
          <span>{formattedDate}</span>
          <Separator orientation="vertical" className="h-4" />
          <span>{readTime}</span>
        </div>
      </div>
    </Link>
    {
      post.data.tags && (
        <div class="mx-auto flex flex-wrap gap-2 self-end md:-mr-2 md:w-3/5">
          {post.data.tags.map((tag: string) => (
            <a href={`tags/${encodeURIComponent(tag)}`} class="no-underline">
              <Badge
                variant="secondary"
                showHash={true}
                className="no-underline"
              >
                {tag}
              </Badge>
            </a>
          ))}
        </div>
      )
    }
  </div>
</div>
